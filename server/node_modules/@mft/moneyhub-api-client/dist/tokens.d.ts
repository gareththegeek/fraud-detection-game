import type { Client, TokenSet } from "openid-client";
import type { ApiClientConfig } from "./schema/config";
declare const _default: ({ client, config, }: {
    client: Client;
    config: ApiClientConfig;
}) => {
    exchangeCodeForTokensLegacy: ({ state, code, nonce, id_token, }: {
        state: string;
        code: string;
        nonce: string;
        id_token?: string | undefined;
    }) => Promise<TokenSet>;
    exchangeCodeForTokens: ({ paramsFromCallback, localParams }: {
        paramsFromCallback: import("./exchange-code-for-token").ParamsFromCallback;
        localParams: import("./exchange-code-for-token").LocalParams;
    }) => Promise<TokenSet>;
    refreshTokens: ({ refreshToken }: {
        refreshToken: string | TokenSet;
    }) => Promise<TokenSet>;
    getClientCredentialTokens: ({ scope, sub }: {
        scope: string;
        sub: string;
    }) => Promise<TokenSet>;
    getJWTBearerToken: ({ scope, sub }: {
        scope: string;
        sub: string;
    }) => Promise<TokenSet>;
    createJWTBearerGrantToken: (sub: string) => Promise<string>;
};
export default _default;
//# sourceMappingURL=tokens.d.ts.map