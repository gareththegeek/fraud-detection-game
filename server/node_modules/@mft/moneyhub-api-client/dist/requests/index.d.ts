import { RequestsParams } from "../request";
declare const _default: ({ config, request }: RequestsParams) => {
    registerUser: ({ clientUserId, }: {
        clientUserId?: string | undefined;
    }, options?: import("../request").ExtraOptions | undefined) => Promise<import("../schema/user").User>;
    getUsers: (params?: import("../request").SearchParams | undefined, options?: import("../request").ExtraOptions | undefined) => Promise<import("../request").ApiResponse<import("../schema/user").User[]>>;
    getSCIMUsers: (params?: import("../request").SearchParams | undefined, options?: import("../request").ExtraOptions | undefined) => Promise<import("../request").ApiResponse<any>>;
    getUser: ({ userId, }: {
        userId: string;
    }, options?: import("../request").ExtraOptions | undefined) => Promise<import("../schema/user").User>;
    getUserConnections: ({ userId, }: {
        userId: string;
    }, options?: import("../request").ExtraOptions | undefined) => Promise<import("../request").ApiResponse<import("../schema/connection").UserConnection[]>>;
    deleteUserConnection: ({ userId, connectionId, }: {
        userId: string;
        connectionId: string;
    }, options?: import("../request").ExtraOptions | undefined) => Promise<number>;
    deleteUser: ({ userId, }: {
        userId: string;
    }, options?: import("../request").ExtraOptions | undefined) => Promise<number>;
    getConnectionSyncs: ({ userId, connectionId, params, }: {
        userId: string;
        connectionId: string;
        params?: import("../request").SearchParams | undefined;
    }, options?: import("../request").ExtraOptions | undefined) => Promise<import("../request").ApiResponse<import("../schema/sync").ConnectionSync[]>>;
    getUserSyncs: ({ userId, params, }: {
        userId: string;
        params?: import("../request").SearchParams | undefined;
    }, options?: import("../request").ExtraOptions | undefined) => Promise<import("../request").ApiResponse<import("../schema/sync").ConnectionSync[]>>;
    getSync: ({ userId, syncId, }: {
        userId: string;
        syncId: string;
    }, options?: import("../request").ExtraOptions | undefined) => Promise<import("../request").ApiResponse<import("../schema/sync").ConnectionSync>>;
    updateUserConnection: ({ userId, connectionId, expiresAt, }: {
        userId: string;
        connectionId: string;
        expiresAt: string;
    }, options?: import("../request").ExtraOptions | undefined) => Promise<number>;
    getGlobalCounterparties: (params?: import("../schema/counterparty").GlobalCounterpartiesSearchParams | undefined) => Promise<import("../request").ApiResponse<import("../schema/counterparty").GlobalCounterparty[]>>;
    listConnections: (query?: {
        clientId?: string | undefined;
    } | undefined) => Promise<import("../schema/connection").WellKnownConnection[]>;
    listAPIConnections: (query?: {
        clientId?: string | undefined;
    } | undefined) => Promise<import("../schema/connection").WellKnownConnection[]>;
    listTestConnections: (query?: {
        clientId?: string | undefined;
    } | undefined) => Promise<import("../schema/connection").WellKnownConnection[]>;
    listBetaConnections: (query?: {
        clientId?: string | undefined;
    } | undefined) => Promise<import("../schema/connection").WellKnownConnection[]>;
    listPaymentsConnections: (query?: {
        clientId?: string | undefined;
    } | undefined) => Promise<import("../schema/connection").WellKnownConnection[]>;
    getOpenIdConfig: () => Promise<unknown>;
    getTransactions: ({ userId, params, }: {
        userId?: string | undefined;
        params?: import("../schema/transaction").TransactionSearchParams | undefined;
    }, options?: import("../request").ExtraOptions | undefined) => Promise<import("../request").ApiResponse<import("../schema/transaction").Transaction[]>>;
    getTransaction: ({ userId, transactionId, }: {
        userId?: string | undefined;
        transactionId: string;
    }, options?: import("../request").ExtraOptions | undefined) => Promise<import("../request").ApiResponse<import("../schema/transaction").Transaction>>;
    addTransaction: ({ userId, transaction, }: {
        userId: string;
        transaction: import("../schema/transaction").TransactionPost;
    }, options?: import("../request").ExtraOptions | undefined) => Promise<import("../request").ApiResponse<import("../schema/transaction").Transaction>>;
    addTransactions: ({ userId, transactions, params, }: {
        userId: string;
        transactions: import("../schema/transaction").TransactionPost[];
        params?: {
            categorise?: boolean | undefined;
        } | undefined;
    }, options?: import("../request").ExtraOptions | undefined) => Promise<import("../request").ApiResponse<{
        id: string;
    }[]>>;
    updateTransaction: ({ userId, transactionId, transaction, }: {
        userId: string;
        transactionId: string;
        transaction: Partial<import("../schema/transaction").TransactionPost>;
    }, options?: import("../request").ExtraOptions | undefined) => Promise<import("../request").ApiResponse<import("../schema/transaction").Transaction>>;
    deleteTransaction: ({ userId, transactionId, }: {
        userId: string;
        transactionId: string;
    }, options?: import("../request").ExtraOptions | undefined) => Promise<import("../request").ApiResponse<number>>;
    splitTransaction: ({ userId, transactionId, splits, }: {
        userId: string;
        transactionId: string;
        splits: import("../schema/transaction").TransactionSplitPost[];
    }, options?: import("../request").ExtraOptions | undefined) => Promise<import("../request").ApiResponse<import("../schema/transaction").TransactionSplit[]>>;
    getTransactionSplits: ({ userId, transactionId, }: {
        userId?: string | undefined;
        transactionId: string;
    }, options?: import("../request").ExtraOptions | undefined) => Promise<import("../request").ApiResponse<import("../schema/transaction").TransactionSplit[]>>;
    patchTransactionSplit: ({ userId, transactionId, splitId, split, }: {
        userId: string;
        transactionId: string;
        splitId: string;
        split: import("../schema/transaction").TransactionSplitPatch;
    }, options?: import("../request").ExtraOptions | undefined) => Promise<import("../request").ApiResponse<import("../schema/transaction").TransactionSplit[]>>;
    deleteTransactionSplits: ({ userId, transactionId, }: {
        userId: string;
        transactionId: string;
    }, options?: import("../request").ExtraOptions | undefined) => Promise<number>;
    addFileToTransaction: ({ userId, transactionId, fileData, fileName, }: {
        userId?: string | undefined;
        transactionId: string;
        fileName: string;
        fileData: any;
    }, options?: import("../request").ExtraOptions | undefined) => Promise<import("../request").ApiResponse<import("../schema/transaction").TransactionFile>>;
    getTransactionFiles: ({ userId, transactionId, }: {
        userId?: string | undefined;
        transactionId: string;
    }, options?: import("../request").ExtraOptions | undefined) => Promise<import("../request").ApiResponse<import("../schema/transaction").TransactionFile[]>>;
    getTransactionFile: ({ userId, transactionId, fileId, }: {
        userId?: string | undefined;
        transactionId: string;
        fileId: string;
    }, options?: import("../request").ExtraOptions | undefined) => Promise<import("../request").ApiResponse<import("../schema/transaction").TransactionFile>>;
    deleteTransactionFile: ({ userId, transactionId, fileId, }: {
        userId?: string | undefined;
        transactionId: string;
        fileId: string;
    }, options?: import("../request").ExtraOptions | undefined) => Promise<number>;
    getTaxReturn: ({ userId, params, }: {
        userId?: string | undefined;
        params?: import("../schema/tax").TaxSearchParams | undefined;
    }, options?: import("../request").ExtraOptions | undefined) => Promise<import("../request").ApiResponse<import("../schema/tax").Tax>>;
    syncUserConnection: ({ userId, connectionId, customerIpAddress, customerLastLoggedTime, enableAsync, }: {
        userId?: string | undefined;
        connectionId: string;
        customerIpAddress?: string | undefined;
        customerLastLoggedTime?: string | undefined;
        enableAsync?: boolean | undefined;
    }, options?: import("../request").ExtraOptions | undefined) => Promise<import("../request").ApiResponse<import("../schema/sync").SyncResponse>>;
    getStandingOrder: ({ id }: {
        id: string;
    }, options?: import("../request").ExtraOptions | undefined) => Promise<import("../request").ApiResponse<import("../schema/standing-order").StandingOrderRequest>>;
    getStandingOrders: (params?: import("../schema/standing-order").StandingOrderSearchParams | undefined, options?: import("../request").ExtraOptions | undefined) => Promise<import("../request").ApiResponse<import("../schema/standing-order").StandingOrderRequest[]>>;
    getSpendingGoals: (params: import("../request").SearchParams, userId: string, options?: import("../request").ExtraOptions | undefined) => Promise<import("../request").ApiResponse<import("../schema/spending-goal").SpendingGoal[]>>;
    getSpendingGoal: ({ goalId, userId, }: {
        goalId: string;
        userId: string;
    }, options?: import("../request").ExtraOptions | undefined) => Promise<import("../request").ApiResponse<import("../schema/spending-goal").SpendingGoal>>;
    createSpendingGoal: ({ categoryId, periodType, periodStart, amount, userId, }: {
        categoryId: string;
        periodType?: ("monthly" | "annual") | undefined;
        periodStart?: string | undefined;
        amount: {
            value: number;
        };
        userId: string;
    }, options?: import("../request").ExtraOptions | undefined) => Promise<import("../request").ApiResponse<import("../schema/spending-goal").SpendingGoal>>;
    updateSpendingGoal: ({ goalId, categoryId, amount, userId, }: {
        goalId: string;
        categoryId?: string | undefined;
        amount?: {
            value: number;
        } | undefined;
        userId: string;
    }, options?: import("../request").ExtraOptions | undefined) => Promise<import("../request").ApiResponse<import("../schema/spending-goal").SpendingGoal>>;
    deleteSpendingGoal: ({ goalId, userId, }: {
        goalId: string;
        userId: string;
    }, options?: import("../request").ExtraOptions | undefined) => Promise<number>;
    getSpendingAnalysis: ({ userId, dates, accountIds, categoryIds, projectIds, }: {
        userId?: string | undefined;
        dates: {
            name: string;
            from: string;
            to: string;
        }[];
        accountIds?: string[] | undefined;
        categoryIds?: string[] | undefined;
        projectIds?: string[] | undefined;
    }, options?: import("../request").ExtraOptions | undefined) => Promise<import("../request").ApiResponse<import("../schema/spending-analysis").SpendingAnalysis>>;
    getSavingsGoals: (params: import("../request").SearchParams, userId: string, options?: import("../request").ExtraOptions | undefined) => Promise<import("../request").ApiResponse<import("../schema/savings-goal").SavingsGoal[]>>;
    getSavingsGoal: ({ goalId, userId, }: {
        goalId: string;
        userId: string;
    }, options?: import("../request").ExtraOptions | undefined) => Promise<import("../request").ApiResponse<import("../schema/savings-goal").SavingsGoal>>;
    createSavingsGoal: ({ name, imageUrl, notes, accounts, amount, userId, }: {
        name: string;
        imageUrl?: string | undefined;
        notes?: string | undefined;
        accounts: {
            id: string;
        }[];
        amount: {
            value: number;
            currency?: string | undefined;
        };
        userId: string;
    }, options?: import("../request").ExtraOptions | undefined) => Promise<import("../request").ApiResponse<import("../schema/savings-goal").SavingsGoal>>;
    updateSavingsGoal: ({ goalId, name, amount, imageUrl, notes, accounts, userId, }: {
        goalId: string;
        name?: string | undefined;
        imageUrl?: string | undefined;
        notes?: string | undefined;
        accounts: {
            id: string;
        }[];
        amount?: {
            value: number;
        } | undefined;
        userId: string;
    }, options?: import("../request").ExtraOptions | undefined) => Promise<import("../request").ApiResponse<import("../schema/savings-goal").SavingsGoal>>;
    deleteSavingsGoal: ({ goalId, userId, }: {
        goalId: string;
        userId: string;
    }, options?: import("../request").ExtraOptions | undefined) => Promise<number>;
    getRentalRecords: ({ userId, }: {
        userId: string;
    }, options?: import("../request").ExtraOptions | undefined) => Promise<import("../request").ApiResponse<import("../schema/rental-record").RentalRecord[]>>;
    createRentalRecord: ({ userId, rentalData, }: {
        userId: string;
        rentalData: import("../schema/rental-record").RentalRecordPost;
    }, options?: import("../request").ExtraOptions | undefined) => Promise<import("../request").ApiResponse<import("../schema/rental-record").RentalRecord>>;
    deleteRentalRecord: ({ userId, rentalId, }: {
        userId: string;
        rentalId: string;
    }, options?: import("../request").ExtraOptions | undefined) => Promise<number>;
    getRegularTransactions: ({ userId, params, }: {
        userId?: string | undefined;
        params?: import("../schema/regular-transaction").RegularTransactionSearchParams | undefined;
    }, options?: import("../request").ExtraOptions | undefined) => Promise<import("../request").ApiResponse<import("../schema/regular-transaction").RegularTransaction[]>>;
    detectRegularTransactions: ({ userId, accountId, }: {
        userId?: string | undefined;
        accountId: string;
    }, options?: import("../request").ExtraOptions | undefined) => Promise<import("../request").ApiResponse<import("../schema/regular-transaction").RegularTransaction[]>>;
    getRecurringPayments: (params?: import("../schema/payment").RecurringPaymentSearchParams | undefined, options?: import("../request").ExtraOptions | undefined) => Promise<import("../request").ApiResponse<import("../schema/payment").RecurringPaymentRequest[]>>;
    getRecurringPayment: ({ recurringPaymentId, }: {
        recurringPaymentId: string;
    }, options?: import("../request").ExtraOptions | undefined) => Promise<import("../request").ApiResponse<import("../schema/payment").RecurringPaymentRequest>>;
    makeRecurringPayment: ({ recurringPaymentId, payment, }: {
        recurringPaymentId: string;
        payment: import("../schema/payment").PaymentsClaims;
    }, options?: import("../request").ExtraOptions | undefined) => Promise<import("../request").ApiResponse<import("../schema/payment").RecurringPaymentRequest>>;
    revokeRecurringPayment: ({ recurringPaymentId, }: {
        recurringPaymentId: string;
    }, options?: import("../request").ExtraOptions | undefined) => Promise<number>;
    getProjects: ({ userId, params, }: {
        userId: string;
        params?: import("../request").SearchParams | undefined;
    }, options?: import("../request").ExtraOptions | undefined) => Promise<import("../request").ApiResponse<import("../schema/project").Project[]>>;
    getProject: ({ userId, projectId, }: {
        userId: string;
        projectId: string;
    }, options?: import("../request").ExtraOptions | undefined) => Promise<import("../request").ApiResponse<import("../schema/project").Project>>;
    addProject: ({ userId, project, }: {
        userId: string;
        project: import("../schema/project").ProjectPost;
    }, options?: import("../request").ExtraOptions | undefined) => Promise<import("../request").ApiResponse<import("../schema/project").Project>>;
    updateProject: ({ userId, projectId, project, }: {
        userId: string;
        projectId: string;
        project: import("../schema/project").ProjectPatch;
    }, options?: import("../request").ExtraOptions | undefined) => Promise<import("../request").ApiResponse<import("../schema/project").Project>>;
    deleteProject: ({ userId, projectId, }: {
        userId: string;
        projectId: string;
    }, options?: import("../request").ExtraOptions | undefined) => Promise<number>;
    addPayLink: import("./types/pay-links").AddPayLink;
    getPayLink: import("./types/pay-links").GetPayLink;
    getPayLinks: import("./types/pay-links").GetPayLinks;
    getPayment: ({ id }: {
        id: string;
    }, options?: import("../request").ExtraOptions | undefined) => Promise<import("../request").ApiResponse<import("../schema/payment").Payment>>;
    getPayments: (params?: import("../schema/payment").PaymentSearchParams | undefined, options?: import("../request").ExtraOptions | undefined) => Promise<import("../request").ApiResponse<import("../schema/payment").Payment[]>>;
    getPaymentFromIDToken: ({ idToken }: {
        idToken: string;
    }, options?: import("../request").ExtraOptions | undefined) => Promise<import("../request").ApiResponse<import("../schema/payment").Payment>>;
    addPayee: ({ accountNumber, sortCode, name, externalId, userId, }: {
        accountNumber: string;
        sortCode: string;
        name: string;
        externalId?: string | undefined;
        userId?: string | undefined;
    }, options?: import("../request").ExtraOptions | undefined) => Promise<import("../request").ApiResponse<import("../schema/payee").Payee>>;
    getPayees: (params?: import("../schema/payee").PayeesSearchParams | undefined, options?: import("../request").ExtraOptions | undefined) => Promise<import("../request").ApiResponse<import("../schema/payee").Payee[]>>;
    getPayee: ({ id }: {
        id: string;
    }, options?: import("../request").ExtraOptions | undefined) => Promise<import("../request").ApiResponse<import("../schema/payee").Payee>>;
    getOsipAccounts: ({ userId, params }: {
        userId?: string | undefined;
        params?: import("../request").SearchParams | undefined;
    }, options?: import("../request").ExtraOptions | undefined) => Promise<Omit<import("../request").ApiResponse<import("../schema/osip").OsipAccount[]>, "links">>;
    getOsipAccount: ({ userId, accountId }: {
        userId?: string | undefined;
        accountId: string;
    }, options?: import("../request").ExtraOptions | undefined) => Promise<Omit<import("../request").ApiResponse<import("../schema/osip").OsipAccount>, "links">>;
    getOsipAccountHoldings: ({ userId, accountId, }: {
        userId?: string | undefined;
        accountId: string;
    }, options?: import("../request").ExtraOptions | undefined) => Promise<import("../request").ApiResponse<import("../schema/osip").OsipHolding[]>>;
    getOsipAccountTransactions: ({ userId, accountId, }: {
        userId?: string | undefined;
        accountId: string;
    }, options?: import("../request").ExtraOptions | undefined) => Promise<import("../request").ApiResponse<import("../schema/osip").OsipTransaction[]>>;
    getNotificationThresholds: ({}: {
        userId?: string | undefined;
        accountId: string;
    }, options?: import("../request").ExtraOptions | undefined) => Promise<import("../request").ApiResponse<import("../schema/notification-threshold").NotificationThreshold[]>>;
    addNotificationThreshold: ({}: {
        userId?: string | undefined;
        accountId: string;
        threshold: import("../schema/notification-threshold").NotificationThresholdBody;
    }, options?: import("../request").ExtraOptions | undefined) => Promise<import("../request").ApiResponse<import("../schema/notification-threshold").NotificationThreshold>>;
    updateNotificationThreshold: ({}: {
        userId?: string | undefined;
        accountId: string;
        thresholdId: string;
        threshold: import("../schema/notification-threshold").NotificationThresholdBody;
    }, options?: import("../request").ExtraOptions | undefined) => Promise<import("../request").ApiResponse<import("../schema/notification-threshold").NotificationThreshold>>;
    deleteNotificationThreshold: ({}: {
        userId?: string | undefined;
        accountId: string;
        thresholdId: string;
    }, options?: import("../request").ExtraOptions | undefined) => Promise<void>;
    getCategories: ({ userId, params, }: {
        userId?: string | undefined;
        params?: (import("../request").SearchParams & {
            type?: import("../schema/category").CategoryType | undefined;
        }) | undefined;
    }, options?: import("../request").ExtraOptions | undefined) => Promise<import("../request").ApiResponse<import("../schema/category").Category[]>>;
    getStandardCategories: ({ params, }: {
        params?: (import("../request").SearchParams & {
            type?: import("../schema/category").CategoryType | undefined;
        }) | undefined;
    }, options?: import("../request").ExtraOptions | undefined) => Promise<import("../request").ApiResponse<import("../schema/category").Category[]>>;
    getCategory: ({ userId, categoryId, params, }: {
        userId?: string | undefined;
        categoryId: string;
        params?: {
            type?: import("../schema/category").CategoryType | undefined;
        } | undefined;
    }, options?: import("../request").ExtraOptions | undefined) => Promise<import("../request").ApiResponse<import("../schema/category").Category>>;
    getCategoryGroups: ({ userId, params, }: {
        userId?: string | undefined;
        params?: {
            type?: import("../schema/category").CategoryType | undefined;
        } | undefined;
    }, options?: import("../request").ExtraOptions | undefined) => Promise<import("../request").ApiResponse<import("../schema/category").CategoryGroup[]>>;
    getStandardCategoryGroups: ({ params, }: {
        params?: {
            type?: import("../schema/category").CategoryType | undefined;
        } | undefined;
    }, options?: import("../request").ExtraOptions | undefined) => Promise<import("../request").ApiResponse<import("../schema/category").CategoryGroup[]>>;
    createCustomCategory: ({ userId, category, }: {
        userId?: string | undefined;
        category: import("../schema/category").CategoryPost;
    }, options?: import("../request").ExtraOptions | undefined) => Promise<import("../request").ApiResponse<import("../schema/category").Category>>;
    getBeneficiary: ({ id, userId, }: {
        id: string;
        userId?: string | undefined;
    }, options?: import("../request").ExtraOptions | undefined) => Promise<import("../request").ApiResponse<import("../schema/beneficiary").Beneficiary>>;
    getBeneficiaryWithDetail: ({ id, userId, }: {
        id: string;
        userId?: string | undefined;
    }, options?: import("../request").ExtraOptions | undefined) => Promise<import("../request").ApiResponse<import("../schema/beneficiary").BeneficiaryWithDetails>>;
    getBeneficiaries: ({ params, userId, }: {
        params?: import("../request").SearchParams | undefined;
        userId?: string | undefined;
    }, options?: import("../request").ExtraOptions | undefined) => Promise<import("../request").ApiResponse<import("../schema/beneficiary").Beneficiary[]>>;
    getBeneficiariesWithDetail: ({ params, userId, }: {
        params?: import("../request").SearchParams | undefined;
        userId?: string | undefined;
    }, options?: import("../request").ExtraOptions | undefined) => Promise<import("../request").ApiResponse<import("../schema/beneficiary").BeneficiaryWithDetails[]>>;
    createAuthRequest: ({ redirectUri, userId, scope, connectionId, payment, standingOrder, recurringPayment, reversePayment, categorisationType, benefitsCheck, counterpartiesCheck, permissions, expirationDateTime, transactionsFromDateTime, sync, }: {
        redirectUri?: string | undefined;
        userId?: string | undefined;
        scope: string;
        connectionId?: string | undefined;
        payment?: import("../schema/payment").AuthRequestPostPayment | undefined;
        standingOrder?: import("../schema/standing-order").AuthRequestStandingOrderPost | undefined;
        recurringPayment?: import("../schema/payment").AuthRequestPostRecurringPayment | undefined;
        reversePayment?: import("../schema/payment").AuthRequestPostReversePayment | undefined;
        categorisationType?: import("../schema/account").AccountType | undefined;
        benefitsCheck?: boolean | undefined;
        counterpartiesCheck?: string[] | undefined;
        permissions?: ("ReadStandingOrdersBasic" | "ReadStandingOrdersDetail" | "ReadBeneficiariesDetail") | undefined;
        expirationDateTime?: string | undefined;
        transactionsFromDateTime?: string | undefined;
        sync?: {
            enableAsync?: boolean | undefined;
        } | undefined;
    }, options?: import("../request").ExtraOptions | undefined) => Promise<import("../request").ApiResponse<import("../schema/auth-request").AuthRequest>>;
    completeAuthRequest: ({ id, authParams, }: {
        id: string;
        authParams: import("../schema/auth-request").AuthParams;
    }, options?: import("../request").ExtraOptions | undefined) => Promise<import("../request").ApiResponse<import("../schema/auth-request").AuthRequest>>;
    getAllAuthRequests: (params?: import("../request").SearchParams | undefined, options?: import("../request").ExtraOptions | undefined) => Promise<import("../request").ApiResponse<import("../schema/auth-request").AuthRequest[]>>;
    getAuthRequest: ({ id }: {
        id: string;
    }, options?: import("../request").ExtraOptions | undefined) => Promise<import("../request").ApiResponse<import("../schema/auth-request").AuthRequest>>;
    createAffordability: ({ userId }: {
        userId: string;
    }, options?: import("../request").ExtraOptions | undefined) => Promise<import("../request").ApiResponse<import("../schema/affordability").Affordability>>;
    getAffordability: ({ userId, id }: {
        userId: string;
        id: string;
    }, options?: import("../request").ExtraOptions | undefined) => Promise<import("../request").ApiResponse<import("../schema/affordability").Affordability>>;
    getAllAffordability: ({ userId, ...query }: {
        userId: string;
    } & import("../request").SearchParams, options?: import("../request").ExtraOptions | undefined) => Promise<import("../request").ApiResponse<import("../schema/affordability").AffordabilityMetadata[]>>;
    getAccounts: ({ userId, params }: {
        userId?: string | undefined;
        params?: import("../request").SearchParams | undefined;
    }, options?: import("../request").ExtraOptions | undefined) => Promise<import("../request").ApiResponse<import("../schema/account").Account[]>>;
    getAccountsWithDetails: ({ userId, }: {
        userId?: string | undefined;
        params?: import("../request").SearchParams | undefined;
    }, options?: import("../request").ExtraOptions | undefined) => Promise<import("../request").ApiResponse<import("../schema/account").AccountWithDetails[]>>;
    getAccountsList: ({ userId, params }: {
        userId?: string | undefined;
        params?: import("../request").SearchParams | undefined;
    }, options?: import("../request").ExtraOptions | undefined) => Promise<import("../request").ApiResponse<import("../schema/account").Account[]>>;
    getAccountsListWithDetails: ({ userId, }: {
        userId?: string | undefined;
        params?: import("../request").SearchParams | undefined;
    }, options?: import("../request").ExtraOptions | undefined) => Promise<import("../request").ApiResponse<import("../schema/account").AccountWithDetails[]>>;
    getAccount: ({ userId, accountId }: {
        userId?: string | undefined;
        accountId: string;
    }, options?: import("../request").ExtraOptions | undefined) => Promise<import("../request").ApiResponse<import("../schema/account").Account>>;
    getAccountBalances: ({ userId, accountId, }: {
        userId?: string | undefined;
        accountId: string;
    }, options?: import("../request").ExtraOptions | undefined) => Promise<import("../request").ApiResponse<import("../schema/balance").Balance[]>>;
    getAccountWithDetails: ({ userId, accountId, }: {
        userId?: string | undefined;
        accountId: string;
    }, options?: import("../request").ExtraOptions | undefined) => Promise<import("../request").ApiResponse<import("../schema/account").AccountWithDetails>>;
    getAccountHoldings: ({ userId, accountId, }: {
        userId?: string | undefined;
        accountId: string;
    }, options?: import("../request").ExtraOptions | undefined) => Promise<import("../request").ApiResponse<import("../schema/holding").HoldingsValuation[]>>;
    getAccountHoldingsWithMatches: ({ userId, accountId, }: {
        userId?: string | undefined;
        accountId: string;
    }, options?: import("../request").ExtraOptions | undefined) => Promise<import("../request").ApiResponse<import("../schema/holding").HoldingWithMatches[]>>;
    getAccountCounterparties: ({ userId, accountId, }: {
        userId?: string | undefined;
        accountId: string;
        params?: import("../request").SearchParams | undefined;
    }, options?: import("../request").ExtraOptions | undefined) => Promise<import("../request").ApiResponse<import("../schema/counterparty").Counterparty[]>>;
    getAccountRecurringTransactions: ({ userId, accountId, }: {
        userId?: string | undefined;
        accountId: string;
    }, options?: import("../request").ExtraOptions | undefined) => Promise<import("../request").ApiResponse<import("../schema/transaction").RecurringTransactionEstimate[]>>;
    getAccountStandingOrders: ({ userId, accountId, }: {
        userId?: string | undefined;
        accountId: string;
    }, options?: import("../request").ExtraOptions | undefined) => Promise<import("../request").ApiResponse<import("../schema/standing-order").StandingOrder[]>>;
    createAccount: ({ userId, account }: {
        userId: string;
        account: import("../schema/account").AccountPost;
    }, options?: import("../request").ExtraOptions | undefined) => Promise<import("../request").ApiResponse<import("../schema/account").Account>>;
    deleteAccount: ({ userId, accountId }: {
        userId: string;
        accountId: string;
    }, options?: import("../request").ExtraOptions | undefined) => Promise<number>;
    getAccountHolding: ({ userId, accountId, holdingId, }: {
        userId?: string | undefined;
        accountId: string;
        holdingId: string;
    }, options?: import("../request").ExtraOptions | undefined) => Promise<import("../request").ApiResponse<import("../schema/holding").HoldingWithMatchesAndHistory>>;
    getAccountStandingOrdersWithDetail: ({ userId, accountId, }: {
        userId?: string | undefined;
        accountId: string;
    }, options?: import("../request").ExtraOptions | undefined) => Promise<import("../request").ApiResponse<import("../schema/standing-order").StandingOrderWithDetail[]>>;
    addAccountBalance: ({ userId, accountId, balance }: {
        userId: string;
        accountId: string;
        balance: import("../schema/account").AccountBalancePost;
    }, options?: import("../request").ExtraOptions | undefined) => Promise<import("../request").ApiResponse<import("../schema/account").AccountBalancePost>>;
    updateAccount: ({ userId, accountId, account }: {
        userId: string;
        accountId: string;
        account: import("../schema/account").AccountPatch;
    }, options?: import("../request").ExtraOptions | undefined) => Promise<import("../request").ApiResponse<import("../schema/account").AccountWithDetails>>;
};
export default _default;
//# sourceMappingURL=index.d.ts.map