/// <reference types="mocha" />
import type { Client } from "openid-client";
import type { ApiClientConfig } from "./schema/config";
import { PaymentActorType } from "./schema/payment";
import { StandingOrderFrequency } from "./schema/standing-order";
import { RequestPayee } from "./schema/payee";
declare type PkceParams = {
    code_challenge: string;
    code_challenge_method: string;
};
declare const _default: ({ client, config, }: {
    client: Client;
    config: ApiClientConfig;
}) => {
    getAuthorizeUrl: ({ state, scope, nonce, claims, permissions, enableAsync, expirationDateTime, transactionFromDateTime, codeChallenge, }: {
        state?: string | undefined;
        scope: string;
        nonce?: string | undefined;
        claims?: any;
        permissions?: string[] | undefined;
        enableAsync?: boolean | undefined;
        expirationDateTime?: string | undefined;
        transactionFromDateTime?: string | undefined;
        codeChallenge?: string | undefined;
    }) => Promise<string>;
    getAuthorizeUrlLegacy: ({ state, scope, nonce, claims, permissions, enableAsync, expirationDateTime, transactionFromDateTime, codeChallenge, }: {
        state?: string | undefined;
        scope: string;
        nonce?: string | undefined;
        claims?: any;
        permissions?: string[] | undefined;
        enableAsync?: boolean | undefined;
        expirationDateTime?: string | undefined;
        transactionFromDateTime?: string | undefined;
        codeChallenge?: string | undefined;
    }) => Promise<string>;
    getAuthorizeUrlFromRequestUri: ({ requestUri }: {
        requestUri: string;
    }) => string;
    requestObject: ({ scope, state, claims, nonce, pkceParams, }: {
        scope: string;
        state?: string | undefined;
        claims: object;
        nonce?: string | undefined;
        pkceParams?: PkceParams | undefined;
    }) => Promise<string>;
    getRequestUri: (requestObject: any) => Promise<string>;
    getAuthorizeUrlForCreatedUser: ({ bankId, state, nonce, userId, claims, permissions, expirationDateTime, transactionFromDateTime, enableAsync, codeChallenge, }: {
        bankId: string;
        state?: string | undefined;
        nonce?: string | undefined;
        userId: string;
        claims?: any;
        permissions?: string[] | undefined;
        expirationDateTime?: string | undefined;
        transactionFromDateTime?: string | undefined;
        enableAsync?: boolean | undefined;
        codeChallenge?: string | undefined;
    }) => Promise<string>;
    getReauthAuthorizeUrlForCreatedUser: ({ userId, connectionId, state, nonce, claims, expirationDateTime, transactionFromDateTime, enableAsync, codeChallenge, }: {
        userId: string;
        connectionId: string;
        state?: string | undefined;
        nonce?: string | undefined;
        claims?: any;
        expirationDateTime?: string | undefined;
        transactionFromDateTime?: string | undefined;
        enableAsync?: boolean | undefined;
        codeChallenge: string;
    }) => Promise<string>;
    getReconsentAuthorizeUrlForCreatedUser: ({ userId, connectionId, expiresAt, state, nonce, claims, codeChallenge, }: {
        userId: string;
        connectionId: string;
        state?: string | undefined;
        nonce?: string | undefined;
        claims?: any;
        expiresAt?: string | undefined;
        codeChallenge?: string | undefined;
    }) => Promise<string>;
    getRefreshAuthorizeUrlForCreatedUser: ({ userId, connectionId, state, nonce, claims, expirationDateTime, transactionFromDateTime, enableAsync, codeChallenge, }: {
        userId?: string | undefined;
        connectionId: string;
        state?: string | undefined;
        nonce?: string | undefined;
        claims?: any;
        expirationDateTime?: string | undefined;
        transactionFromDateTime?: string | undefined;
        enableAsync?: boolean | undefined;
        codeChallenge?: string | undefined;
    }) => Promise<string>;
    getPaymentAuthorizeUrl: ({ bankId, payeeRef, payeeId, payee, payeeType, amount, payerRef, payerId, payerType, state, nonce, context, readRefundAccount, userId, claims, codeChallenge, }: {
        bankId: string;
        payeeRef: string;
        payeeId?: string | undefined;
        payeeType?: string | undefined;
        amount: number;
        payerRef: string;
        payerId?: string | undefined;
        payee?: RequestPayee | undefined;
        payerType?: string | undefined;
        state?: string | undefined;
        nonce?: string | undefined;
        context?: string | undefined;
        readRefundAccount?: boolean | undefined;
        userId?: string | undefined;
        claims?: any;
        codeChallenge?: string | undefined;
    }) => Promise<string>;
    getReversePaymentAuthorizeUrl: ({ bankId, paymentId, state, nonce, amount, claims, payerId, payerType, codeChallenge, }: {
        bankId: string;
        paymentId: string;
        state?: string | undefined;
        nonce?: string | undefined;
        amount: number;
        claims?: any;
        payerId?: string | undefined;
        payerType?: PaymentActorType | undefined;
        codeChallenge?: string | undefined;
    }) => Promise<string>;
    getRecurringPaymentAuthorizeUrl: ({ bankId, payeeId, payee, payeeType, payerId, payerType, reference, validFromDate, validToDate, maximumIndividualAmount, currency, periodicLimits, type, context, state, nonce, userId, claims, codeChallenge, }: {
        bankId: string;
        payeeId?: string | undefined;
        payee?: RequestPayee | undefined;
        payeeType?: string | undefined;
        payerId?: string | undefined;
        payerType?: string | undefined;
        reference?: string | undefined;
        validFromDate?: string | undefined;
        validToDate?: string | undefined;
        maximumIndividualAmount?: number | undefined;
        currency?: string | undefined;
        periodicLimits?: any;
        type?: string | undefined;
        context?: string | undefined;
        state?: string | undefined;
        nonce?: string | undefined;
        userId: string;
        claims?: any;
        codeChallenge?: string | undefined;
    }) => Promise<string>;
    getStandingOrderAuthorizeUrl: ({ bankId, payeeId, payee, payeeType, payerId, payerType, reference, frequency, numberOfPayments, firstPaymentAmount, recurringPaymentAmount, finalPaymentAmount, currency, firstPaymentDate, recurringPaymentDate, finalPaymentDate, state, nonce, context, claims, codeChallenge, }: {
        bankId: string;
        payeeId?: string | undefined;
        payee?: RequestPayee | undefined;
        payeeType?: string | undefined;
        payerId?: string | undefined;
        payerType?: string | undefined;
        reference: string;
        frequency: StandingOrderFrequency;
        numberOfPayments?: number | undefined;
        firstPaymentAmount: number;
        recurringPaymentAmount: number;
        finalPaymentAmount: number;
        currency?: string | undefined;
        firstPaymentDate: string;
        recurringPaymentDate: string;
        finalPaymentDate: string;
        state?: string | undefined;
        nonce?: string | undefined;
        context: string;
        claims?: any;
        codeChallenge?: string | undefined;
    }) => Promise<string>;
    getPushedAuthorisationRequestUrl: ({ bankId, state, nonce, userId, claims, permissions, expirationDateTime, transactionFromDateTime, enableAsync, codeChallenge, }: {
        bankId: string;
        state?: string | undefined;
        nonce?: string | undefined;
        userId?: string | undefined;
        context?: string | undefined;
        claims?: any;
        permissions?: string[] | undefined;
        expirationDateTime?: string | undefined;
        transactionFromDateTime?: string | undefined;
        enableAsync?: boolean | undefined;
        codeChallenge?: string | undefined;
    }) => Promise<string>;
};
export default _default;
//# sourceMappingURL=get-auth-urls.d.ts.map